source("https://bioconductor.org/biocLite.R")
biocLite("limma")
library(limma)
exit
q()
a <- rep( NA, 1e9)
a <- rep( NA, 1e12)
a <- rep( NA, 1e10)
a <- rep( NA, 3e9)
q()
for(i in 1:1e9){
a[i] <- (i+1)*i
}
a <- NULL
for(i in 1:1e9){
a[i] <- (i+1)*i
}
a
library(BSgenome)
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome")
library(BSgenome)
head(available.genomes())
a <- available.genomes()
a
source("https://bioconductor.org/biocLite.R")
biocLite("AnnotationHub")
library(AnnotationHub)
hub <- AnnotationHub()
names(mcols(hub))
unique(hub$species)
names(mcols(hub))
hub
qry <- query(hub, c("granges","homo sapiens","ensembl"))
qry
length(unique(hub$species))
qry <- query(hub, c("granges","salmo salar","ensembl"))
qry
names(mcols(hub))
qry <- query(hub, c("granges","salmo salar","NCBI"))
qry
qry <- query(hub, "salmo salar")
qry
qry$sourceurl
whatIwant <- qry[["AH56329"]]
whatIwant
GRCh38TxDb <- makeTxDbFromGRanges(whatIwant)
whatIwant$conn
whatIwant$field
keys(whatIwant)
library(annotate)
library(AnnotationHub)
library(AnnotationDbi)
hub <- AnnotationHub()
qry <- query(hub, c("salmo salar"))
qry
salmo_salar <- qry[['AH56329']]
AC <- row.names(Ac_Cntrl)
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[1] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[2] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[3] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[4] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[5] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[6] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[7] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[8] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[9] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[10] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[11] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[12] )
columns(salmo_salar)
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[14] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[15] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[16] )
select(salmo_salar, keys(salmo_salar),columns(salmo_salar)[17] )
columns(salmo_salar)
knitr::opts_chunk$set(echo = TRUE)
rnorm(10)
rnorm(10)
library(limma)
library(limma)
library(scatterplot3d)
library(Vennerable)
library(xlsx)
library(gplots)
setwd(path)
path <- "Salmon_raw_data/Liver/"
source <- 'bluefuse'
targets <- "Salmon_raw_data/Liver/Targets.txt"
targets <- readTargets(targets)
shiny::runApp('Shiny train/App-1')
library(shiny)
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
shiny::runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/App-1')
runApp('Shiny train/census-app')
shiny::runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
shiny::runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
a <- as.factor(c('a', 'a', 'b', 'c'))
a
length(levels(a))
runApp('GitHub/Shiny_projects/microarray')
coltargets <- c('FileName', 'Cy3', 'Cy5')
input$ref = 'Cy3'
input <- list()
input$ref <- 'Cy3'
no_select <- c(input$ref, 'FileName')
sel_colum <- coltargets[!(no_select %in% coltargets)]
no_select %in% coltargets
sel_colunm <- coltargets[!(coltargets %in% no_select)]
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
input = list()
input$contrast = 'A-B,C-B'
as.character(unlist(strsplit(input$contrasts,
split = ',')))
input$contrasts
input$contrasts = 'A-B,C-B'
as.character(unlist(strsplit(input$contrasts,
split = ',')))
runApp('GitHub/Shiny_projects/microarray')
df <- data.frame(A = rnorm(10), B = letters[1:10])
df
write.xlsx(df, file = 'xlsprobe.xls')
write.xlsx(df, file = 'xlsprobe.xls', sheetName = 'one')
write.xlsx(df, file = 'xlsprobe.xls', sheetName = 'two', append = T)
write.xlsx(df, file = 'xlsprobe.xls', sheetName = 'two', append = T)
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
shiny::runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
file
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='alegilgal',
token='847AD010CAB650099F3BEFD4078A1B94',
secret='<SECRET>')
rsconnect::setAccountInfo(name='alegilgal',
token='847AD010CAB650099F3BEFD4078A1B94',
secret='iSO7imMuF5ogmBUhTkeXr9S4nB018zm5uxJd/e+a')
library(rsconnect)
rsconnect::deployApp('GitHub/Shiny_projects/microarray/')
rsconnect::deployApp('GitHub/Shiny_projects/microarray/app.R')
rsconnect::deployApp('GitHub/Shiny_projects/microarray/')
library(rsconnect)
rsconnect::deployApp('C:/Users/Usuario/Documents/GitHub/Shiny_projects/microarray/')
rsconnect::deployApp('C:/Users/Usuario/Documents/GitHub/Shiny_projects/microarray/')
library(rs)
library(rsconnect)
rsconnect::deployApp('GitHub/Shiny_projects/microarray/')
rsconnect::deployApp('GitHub/Shiny_projects/microarray')
rsconnect::deployApp('GitHub/Shiny_projects/microarray')
shiny::runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
path <- "Salmon_raw_data/Liver/Raw expression"
source <- 'bluefuse'
targets <- "Targets.txt"
library(limma)
library(scatterplot3d)
library(Vennerable)
library(xlsx)
library(gplots)
targets <- readTargets(targets, path = path)
RG <- read.maimages(targets, source = 'bluefuse')
RG <- read.maimages(targets, source = 'bluefuse', path = path)
RG
RG_normexp <- backgroundCorrect(RG, method="normexp", offset=50)
MA <- normalizeWithinArrays(RG_normexp, method="loess")
MA_norm <- normalizeBetweenArrays(MA, method="Aquantile")
MA_norm
fit <- lmFit(MA_norm, design)
design <- modelMatrix(targets, ref = 'Ref')
fit <- lmFit(MA_norm, design)
contrast.matrix <- makeContrasts(AC - Cntrl,
AT - Cntrl,
CA - Cntrl,
levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
fit2
runApp('GitHub/Shiny_projects/microarray')
Ac_Cntrl <- topTable(fit2, coef = "AC - Cntrl", number = Inf)
Ac_Cntrl
runApp('GitHub/Shiny_projects/microarray')
fit
contrast.matrix
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2
fit2
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
nterest <- top_table[ abs(top_table$logFC) > input$fc &
top_table$P.Value < input$alpha,]
Ac_Cntrl[,6:]
Ac_Cntrl[,6:13]
6:13
c(6:13)
runApp('GitHub/Shiny_projects/microarray')
progress::progress_bar
shiny::runApp('GitHub/Shiny_projects/microarray')
for(i in letters){ print(i)}
runApp('GitHub/Shiny_projects/microarray')
file()
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
shiny::runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
runApp('GitHub/Shiny_projects/microarray')
library(limma)
setwd("G:/GSE71714")
library(limma)
setwd("G:/GSE71714")
targets <- readTargets('Targets.txt')
RG <- read.maimages(targets, source = 'agilent', green.only = T)
show(RG)
plotMA3by2(RG) # this function generates PNGs files in the working directory.
boxplot(data.frame(log2(RG$G)),main="Green background") # the background in the green channel is more or less uniform
RG$E
RG$Eb
boxplot(data.frame(log2(RG$E)),main="Green background") # the background in the green channel is more or less uniform
RG_normexp <- backgroundCorrect(RG, method="normexp", offset=50)
RG_normexp
RG_normexp$E
RG$E
plotMA(RG_normexp)
plotDensities(RG_normexp)
RG_normexp
targets <- readTargets('Targets.txt')
RG <- read.maimages(targets, source = 'agilent', green.only = T)
show(RG)
plotMA3by2(RG) # this function generates PNGs files in the working directory.
boxplot(data.frame(log2(RG$E)),main="Green background") # the background in the green channel is more or less uniform
RG_normexp <- backgroundCorrect(RG, method="normexp", offset=50)
plotMA(RG_normexp)
plotDensities(RG_normexp)
MA <- normalizeWithinArrays(RG_normexp, method="loess")
RG_normexp
MA_norm <- normalizeBetweenArrays(RG_normexp, method="quantile")
MA_norm
plotDensities(MA_norm) # It's not ideal, but its much better than in the begining
plotMA(MA_norm) # We can see that we have centered the MA plot in 0, solving some problems.
design <- modelMatrix(targets, ref = 'Ctrl')
design <- model.matrix(~ 0+factor(c(1,1,1,1,2,2,2,2)))
design
paste('Ctrl', 1:4)
paste('Salt', 1:4)
c(paste('Ctrl', 1:4), paste('Salt', 1:4))
rownames(design) <- c(paste('Ctrl', 1:4), paste('Salt', 1:4))
colnames(design) <- c('Ctrl', 'Salt')
design
col_groups <- rep(NA, 8)
samples <- c(paste('Ctrl', 1:4), paste('Salt', 1:4))
col_groups[grep('Ctrl', samples)] <- 'red'
col_groups[grep('Salt', samples)] <- 'green'
library(scatterplot3d)
summary(pca.filt <- prcomp(t(MA_norm$A), scale = TRUE ))
MA_norm$A
summary(pca.filt <- prcomp(t(MA_norm$E), scale = TRUE ))
pca3d<-scatterplot3d(x=pca.filt$x[,1],y=pca.filt$x[,2],z=pca.filt$x[,3],
xlab='PC1', ylab='PC2', zlab='PC3', main='PCA',
pch=16,col.grid="lightblue",
color = col_groups)
pca3d<-scatterplot3d(x=pca.filt$x[,3],y=pca.filt$x[,2],z=pca.filt$x[,1],
xlab='PC1', ylab='PC2', zlab='PC3', main='PCA',
pch=16,col.grid="lightblue",
color = col_groups)
plot(x=pca.filt$x[,1],y=pca.filt$x[,2], color = col_groups )
plot(x=pca.filt$x[,1],y=pca.filt$x[,2], col = col_groups )
warnings()
fit <- lmFit(MA_norm, design)
contrast.matrix <- makeContrasts(Salt-Ctrl, levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
Salt_Cntrl <- topTable(fit2, coef = "Salt-Ctrl", number = Inf)
Salt_Cntrl <- topTable(fit2, coef = "Salt-Ctrl", number = Inf)
Salt_Cntrl <- topTable(fit2, number = Inf)
Salt_Cntrl
Salt_DEGs <- rownames(Salt_Cntrl[Salt_Cntrl$adj.P.Val < 0.05
& abs(Ac_Cntrl$logFC) > 1,])
Salt_DEGs <- rownames(Salt_Cntrl[Salt_Cntrl$adj.P.Val < 0.05
& abs(Salt_Cntrl$logFC) > 1,])
Salt_DEGs
RG_normexp <- neqc(RG)
RG_normexp <- backgroundCorrect(RG, method="normexp", offset=50)
RG_normexp <- backgroundCorrect(RG, method="normexp")
plotMA(RG_normexp)
plotDensities(MA_norm) # It's not ideal, but its much better than in the begining
plotMA(MA_norm) # We can see that we have centered the MA plot in 0, solving some problems.
library(limma)
setwd("Salmon_raw_data/Liver/")
MA_norm
a <- factor(rep('Ctrl', 4), rep('Salt', 4))
a <- factor(c(rep('Ctrl', 4), rep('Salt', 4))
a <- factor(c(rep('Ctrl', 4), rep('Salt', 4)))
a
as.integer(a)
MA_norm$targets
shiny::runApp('~/GitHub/Shiny_projects/microarray')
a
model.matrix(~ 0+factor(as.integer(as.factor(a))))
model.matrix(~ 0+factor(as.factor(MA_norm$targets$Cy3)))
levels(as.factor(MA_norm$targets$Cy3))
design
model.matrix(~ 0+factor(as.integer(
as.factor(MA_norm$targets$Cy3))))
runApp('~/GitHub/Shiny_projects/microarray')
runApp('~/GitHub/Shiny_projects/microarray')
input <- list()
input$single_ch = T
input$mul_comp = T
input$single_ch & !(input$mul_comp)
runApp('~/GitHub/Shiny_projects/microarray')
input$mul_comp = F
input$single_ch & !(input$mul_comp)
if(input$single_ch & !(input$mul_comp)){
top_table <- toptable(fit2, number = Inf,
genelist = fit2$genes)
interest <- top_table[ abs(top_table$logFC) > input$fc &
top_table[,input$fdr_pvalue] < input$alpha,]
head(interest[,c(7:12)], n = 20)
}
top_table <- toptable(fit2, number = Inf,
genelist = fit2$genes)
interest <- top_table[ abs(top_table$logFC) > input$fc &
top_table[,input$fdr_pvalue] < input$alpha,]
interest <- top_table[ abs(top_table$logFC) > 1 &
top_table$adj.P.Val < 0.05,]
head(interest[,c(7:12)], n = 20)
head(interest, n = 20)
head(interest[,5:10], n = 20)
runApp('~/GitHub/Shiny_projects/microarray')
if((input$single_ch & !(input$mul_comp))) print('illo ji')
if((input$single_ch && !(input$mul_comp))) print('illo ji')
runApp('~/GitHub/Shiny_projects/microarray')
plotDensities(MA_norm)
runApp('~/GitHub/Shiny_projects/microarray')
